/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.8 Fri Apr 25 18:05:57 2025.
 */

 #ifndef RIVANNA3_H
 #define RIVANNA3_H
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 #include <stdint.h>
 #include <stdbool.h>
 #include <stddef.h>
 
 #ifndef EINVAL
 #    define EINVAL 22
 #endif
 
 /* Frame ids. */
 #define RIVANNA3_AUX_BATTERY_STATUS_FRAME_ID (0x100u)
 #define RIVANNA3_MOTOR_COMMANDS_FRAME_ID (0x200u)
 #define RIVANNA3_DASHBOARD_COMMANDS_FRAME_ID (0x300u)
 #define RIVANNA3_HEARTBEAT_FRAME_ID (0x400u)
 #define RIVANNA3_CHARGING_MODE_FRAME_ID (0x500u)
 
 /* Frame lengths in bytes. */
 #define RIVANNA3_AUX_BATTERY_STATUS_LENGTH (3u)
 #define RIVANNA3_MOTOR_COMMANDS_LENGTH (8u)
 #define RIVANNA3_DASHBOARD_COMMANDS_LENGTH (1u)
 #define RIVANNA3_HEARTBEAT_LENGTH (8u)
 #define RIVANNA3_CHARGING_MODE_LENGTH (1u)
 
 /* Extended or standard frame types. */
 #define RIVANNA3_AUX_BATTERY_STATUS_IS_EXTENDED (0)
 #define RIVANNA3_MOTOR_COMMANDS_IS_EXTENDED (0)
 #define RIVANNA3_DASHBOARD_COMMANDS_IS_EXTENDED (0)
 #define RIVANNA3_HEARTBEAT_IS_EXTENDED (0)
 #define RIVANNA3_CHARGING_MODE_IS_EXTENDED (0)
 
 /* Frame cycle times in milliseconds. */
 
 
 /* Signal choices. */
 
 
 /* Frame Names. */
 #define RIVANNA3_AUX_BATTERY_STATUS_NAME "AuxBatteryStatus"
 #define RIVANNA3_MOTOR_COMMANDS_NAME "MotorCommands"
 #define RIVANNA3_DASHBOARD_COMMANDS_NAME "DashboardCommands"
 #define RIVANNA3_HEARTBEAT_NAME "Heartbeat"
 #define RIVANNA3_CHARGING_MODE_NAME "ChargingMode"
 
 /* Signal Names. */
 #define RIVANNA3_AUX_BATTERY_STATUS_AUX_VOLTAGE_NAME "aux_voltage"
 #define RIVANNA3_AUX_BATTERY_STATUS_PERCENT_FULL_NAME "percent_full"
 #define RIVANNA3_MOTOR_COMMANDS_BRAKING_NAME "braking"
 #define RIVANNA3_MOTOR_COMMANDS_REGEN_DRIVE_NAME "regen_drive"
 #define RIVANNA3_MOTOR_COMMANDS_MANUAL_DRIVE_NAME "manual_drive"
 #define RIVANNA3_MOTOR_COMMANDS_CRUISE_DRIVE_NAME "cruise_drive"
 #define RIVANNA3_MOTOR_COMMANDS_BRAKE_PEDAL_NAME "brake_pedal"
 #define RIVANNA3_MOTOR_COMMANDS_THROTTLE_NAME "throttle"
 #define RIVANNA3_MOTOR_COMMANDS_CRUISE_SPEED_NAME "cruise_speed"
 #define RIVANNA3_MOTOR_COMMANDS_REGEN_BRAKING_NAME "regen_braking"
 #define RIVANNA3_MOTOR_COMMANDS_THROTTLE_PEDAL_NAME "throttle_pedal"
 #define RIVANNA3_DASHBOARD_COMMANDS_HAZARDS_NAME "hazards"
 #define RIVANNA3_DASHBOARD_COMMANDS_LEFT_TURN_SIGNAL_NAME "left_turn_signal"
 #define RIVANNA3_DASHBOARD_COMMANDS_RIGHT_TURN_SIGNAL_NAME "right_turn_signal"
 #define RIVANNA3_DASHBOARD_COMMANDS_REGEN_EN_NAME "regen_en"
 #define RIVANNA3_DASHBOARD_COMMANDS_CRUISE_INC_NAME "cruise_inc"
 #define RIVANNA3_DASHBOARD_COMMANDS_CRUISE_EN_NAME "cruise_en"
 #define RIVANNA3_DASHBOARD_COMMANDS_CRUISE_DEC_NAME "cruise_dec"
 #define RIVANNA3_HEARTBEAT_FROM_WHEEL_BOARD_NAME "FromWheelBoard"
 #define RIVANNA3_HEARTBEAT_FROM_POWER_BOARD_NAME "FromPowerBoard"
 #define RIVANNA3_HEARTBEAT_FROM_TELEMETRY_BOARD_NAME "FromTelemetryBoard"
 #define RIVANNA3_CHARGING_MODE_CHARGING_MODE_ENABLE_NAME "ChargingModeEnable"

 /**
  * Signals in message AuxBatteryStatus.
  *
  * All signal values are as on the CAN bus.
  */
 struct rivanna3_aux_battery_status_t {
     /**
      * Range: 0..256 (0..256 mV)
      * Scale: 1
      * Offset: 0
      */
     uint16_t aux_voltage;
 
     /**
      * Range: -
      * Scale: 1
      * Offset: 0
      */
     uint8_t percent_full;
 };
 
 /**
  * Signals in message MotorCommands.
  *
  * All signal values are as on the CAN bus.
  */
 struct rivanna3_motor_commands_t {
     /**
      * Range: -
      * Scale: 1
      * Offset: 0
      */
     uint8_t braking;
 
     /**
      * Range: -
      * Scale: 1
      * Offset: 0
      */
     uint8_t regen_drive;
 
     /**
      * Range: -
      * Scale: 1
      * Offset: 0
      */
     uint8_t manual_drive;
 
     /**
      * Range: -
      * Scale: 1
      * Offset: 0
      */
     uint8_t cruise_drive;
 
     /**
      * Range: 0..256 (0..256 -)
      * Scale: 1
      * Offset: 0
      */
     uint16_t brake_pedal;
 
     /**
      * Range: 0..256 (0..256 -)
      * Scale: 1
      * Offset: 0
      */
     uint16_t throttle;
 
     /**
      * Range: 0..256 (0..256 -)
      * Scale: 1
      * Offset: 0
      */
     uint16_t cruise_speed;
 
     /**
      * Range: 0..256 (0..256 -)
      * Scale: 1
      * Offset: 0
      */
     uint16_t regen_braking;
 
     /**
      * Range: 0..256 (0..256 -)
      * Scale: 1
      * Offset: 0
      */
     uint16_t throttle_pedal;
 };
 
 /**
  * Signals in message DashboardCommands.
  *
  * All signal values are as on the CAN bus.
  */
 struct rivanna3_dashboard_commands_t {
     /**
      * Range: -
      * Scale: 1
      * Offset: 0
      */
     uint8_t hazards;
 
     /**
      * Range: -
      * Scale: 1
      * Offset: 0
      */
     uint8_t left_turn_signal;
 
     /**
      * Range: -
      * Scale: 1
      * Offset: 0
      */
     uint8_t right_turn_signal;
 
     /**
      * Range: -
      * Scale: 1
      * Offset: 0
      */
     uint8_t regen_en;
 
     /**
      * Range: -
      * Scale: 1
      * Offset: 0
      */
     uint8_t cruise_inc;
 
     /**
      * Range: -
      * Scale: 1
      * Offset: 0
      */
     uint8_t cruise_en;
 
     /**
      * Range: -
      * Scale: 1
      * Offset: 0
      */
     uint8_t cruise_dec;
 };
 
 /**
  * Signals in message Heartbeat.
  *
  * All signal values are as on the CAN bus.
  */
 struct rivanna3_heartbeat_t {
     /**
      * Range: -
      * Scale: 1
      * Offset: 0
      */
     uint8_t from_wheel_board;
 
     /**
      * Range: -
      * Scale: 1
      * Offset: 0
      */
     uint8_t from_power_board;
 
     /**
      * Range: -
      * Scale: 1
      * Offset: 0
      */
     uint8_t from_telemetry_board;
 };

 /**
 * Signals in message ChargingMode.
 *
 * All signal values are as on the CAN bus.
 */
struct rivanna3_charging_mode_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t charging_mode_enable;
};
 
 /**
  * Pack message AuxBatteryStatus.
  *
  * @param[out] dst_p Buffer to pack the message into.
  * @param[in] src_p Data to pack.
  * @param[in] size Size of dst_p.
  *
  * @return Size of packed data, or negative error code.
  */
 int rivanna3_aux_battery_status_pack(
     uint8_t *dst_p,
     const struct rivanna3_aux_battery_status_t *src_p,
     size_t size);
 
 /**
  * Unpack message AuxBatteryStatus.
  *
  * @param[out] dst_p Object to unpack the message into.
  * @param[in] src_p Message to unpack.
  * @param[in] size Size of src_p.
  *
  * @return zero(0) or negative error code.
  */
 int rivanna3_aux_battery_status_unpack(
     struct rivanna3_aux_battery_status_t *dst_p,
     const uint8_t *src_p,
     size_t size);
 
 /**
  * Init message fields to default values from AuxBatteryStatus.
  *
  * @param[in] msg_p Message to init.
  *
  * @return zero(0) on success or (-1) in case of nullptr argument.
  */
 int rivanna3_aux_battery_status_init(struct rivanna3_aux_battery_status_t *msg_p);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint16_t rivanna3_aux_battery_status_aux_voltage_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_aux_battery_status_aux_voltage_decode(uint16_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_aux_battery_status_aux_voltage_is_in_range(uint16_t value);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint8_t rivanna3_aux_battery_status_percent_full_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_aux_battery_status_percent_full_decode(uint8_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_aux_battery_status_percent_full_is_in_range(uint8_t value);
 
 /**
  * Pack message MotorCommands.
  *
  * @param[out] dst_p Buffer to pack the message into.
  * @param[in] src_p Data to pack.
  * @param[in] size Size of dst_p.
  *
  * @return Size of packed data, or negative error code.
  */
 int rivanna3_motor_commands_pack(
     uint8_t *dst_p,
     const struct rivanna3_motor_commands_t *src_p,
     size_t size);
 
 /**
  * Unpack message MotorCommands.
  *
  * @param[out] dst_p Object to unpack the message into.
  * @param[in] src_p Message to unpack.
  * @param[in] size Size of src_p.
  *
  * @return zero(0) or negative error code.
  */
 int rivanna3_motor_commands_unpack(
     struct rivanna3_motor_commands_t *dst_p,
     const uint8_t *src_p,
     size_t size);
 
 /**
  * Init message fields to default values from MotorCommands.
  *
  * @param[in] msg_p Message to init.
  *
  * @return zero(0) on success or (-1) in case of nullptr argument.
  */
 int rivanna3_motor_commands_init(struct rivanna3_motor_commands_t *msg_p);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint8_t rivanna3_motor_commands_braking_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_motor_commands_braking_decode(uint8_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_motor_commands_braking_is_in_range(uint8_t value);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint8_t rivanna3_motor_commands_regen_drive_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_motor_commands_regen_drive_decode(uint8_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_motor_commands_regen_drive_is_in_range(uint8_t value);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint8_t rivanna3_motor_commands_manual_drive_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_motor_commands_manual_drive_decode(uint8_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_motor_commands_manual_drive_is_in_range(uint8_t value);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint8_t rivanna3_motor_commands_cruise_drive_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_motor_commands_cruise_drive_decode(uint8_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_motor_commands_cruise_drive_is_in_range(uint8_t value);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint16_t rivanna3_motor_commands_brake_pedal_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_motor_commands_brake_pedal_decode(uint16_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_motor_commands_brake_pedal_is_in_range(uint16_t value);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint16_t rivanna3_motor_commands_throttle_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_motor_commands_throttle_decode(uint16_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_motor_commands_throttle_is_in_range(uint16_t value);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint16_t rivanna3_motor_commands_cruise_speed_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_motor_commands_cruise_speed_decode(uint16_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_motor_commands_cruise_speed_is_in_range(uint16_t value);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint16_t rivanna3_motor_commands_regen_braking_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_motor_commands_regen_braking_decode(uint16_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_motor_commands_regen_braking_is_in_range(uint16_t value);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint16_t rivanna3_motor_commands_throttle_pedal_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_motor_commands_throttle_pedal_decode(uint16_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_motor_commands_throttle_pedal_is_in_range(uint16_t value);
 
 /**
  * Pack message DashboardCommands.
  *
  * @param[out] dst_p Buffer to pack the message into.
  * @param[in] src_p Data to pack.
  * @param[in] size Size of dst_p.
  *
  * @return Size of packed data, or negative error code.
  */
 int rivanna3_dashboard_commands_pack(
     uint8_t *dst_p,
     const struct rivanna3_dashboard_commands_t *src_p,
     size_t size);
 
 /**
  * Unpack message DashboardCommands.
  *
  * @param[out] dst_p Object to unpack the message into.
  * @param[in] src_p Message to unpack.
  * @param[in] size Size of src_p.
  *
  * @return zero(0) or negative error code.
  */
 int rivanna3_dashboard_commands_unpack(
     struct rivanna3_dashboard_commands_t *dst_p,
     const uint8_t *src_p,
     size_t size);
 
 /**
  * Init message fields to default values from DashboardCommands.
  *
  * @param[in] msg_p Message to init.
  *
  * @return zero(0) on success or (-1) in case of nullptr argument.
  */
 int rivanna3_dashboard_commands_init(struct rivanna3_dashboard_commands_t *msg_p);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint8_t rivanna3_dashboard_commands_hazards_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_dashboard_commands_hazards_decode(uint8_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_dashboard_commands_hazards_is_in_range(uint8_t value);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint8_t rivanna3_dashboard_commands_left_turn_signal_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_dashboard_commands_left_turn_signal_decode(uint8_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_dashboard_commands_left_turn_signal_is_in_range(uint8_t value);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint8_t rivanna3_dashboard_commands_right_turn_signal_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_dashboard_commands_right_turn_signal_decode(uint8_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_dashboard_commands_right_turn_signal_is_in_range(uint8_t value);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint8_t rivanna3_dashboard_commands_regen_en_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_dashboard_commands_regen_en_decode(uint8_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_dashboard_commands_regen_en_is_in_range(uint8_t value);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint8_t rivanna3_dashboard_commands_cruise_inc_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_dashboard_commands_cruise_inc_decode(uint8_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_dashboard_commands_cruise_inc_is_in_range(uint8_t value);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint8_t rivanna3_dashboard_commands_cruise_en_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_dashboard_commands_cruise_en_decode(uint8_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_dashboard_commands_cruise_en_is_in_range(uint8_t value);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint8_t rivanna3_dashboard_commands_cruise_dec_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_dashboard_commands_cruise_dec_decode(uint8_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_dashboard_commands_cruise_dec_is_in_range(uint8_t value);
 
 /**
  * Pack message Heartbeat.
  *
  * @param[out] dst_p Buffer to pack the message into.
  * @param[in] src_p Data to pack.
  * @param[in] size Size of dst_p.
  *
  * @return Size of packed data, or negative error code.
  */
 int rivanna3_heartbeat_pack(
     uint8_t *dst_p,
     const struct rivanna3_heartbeat_t *src_p,
     size_t size);
 
 /**
  * Unpack message Heartbeat.
  *
  * @param[out] dst_p Object to unpack the message into.
  * @param[in] src_p Message to unpack.
  * @param[in] size Size of src_p.
  *
  * @return zero(0) or negative error code.
  */
 int rivanna3_heartbeat_unpack(
     struct rivanna3_heartbeat_t *dst_p,
     const uint8_t *src_p,
     size_t size);
 
 /**
  * Init message fields to default values from Heartbeat.
  *
  * @param[in] msg_p Message to init.
  *
  * @return zero(0) on success or (-1) in case of nullptr argument.
  */
 int rivanna3_heartbeat_init(struct rivanna3_heartbeat_t *msg_p);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint8_t rivanna3_heartbeat_from_wheel_board_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_heartbeat_from_wheel_board_decode(uint8_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_heartbeat_from_wheel_board_is_in_range(uint8_t value);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint8_t rivanna3_heartbeat_from_power_board_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_heartbeat_from_power_board_decode(uint8_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_heartbeat_from_power_board_is_in_range(uint8_t value);
 
 /**
  * Encode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to encode.
  *
  * @return Encoded signal.
  */
 uint8_t rivanna3_heartbeat_from_telemetry_board_encode(double value);
 
 /**
  * Decode given signal by applying scaling and offset.
  *
  * @param[in] value Signal to decode.
  *
  * @return Decoded signal.
  */
 double rivanna3_heartbeat_from_telemetry_board_decode(uint8_t value);
 
 /**
  * Check that given signal is in allowed range.
  *
  * @param[in] value Signal to check.
  *
  * @return true if in range, false otherwise.
  */
 bool rivanna3_heartbeat_from_telemetry_board_is_in_range(uint8_t value);
 
 /**
 * Pack message ChargingMode.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rivanna3_charging_mode_pack(
    uint8_t *dst_p,
    const struct rivanna3_charging_mode_t *src_p,
    size_t size);

/**
 * Unpack message ChargingMode.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rivanna3_charging_mode_unpack(
    struct rivanna3_charging_mode_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ChargingMode.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int rivanna3_charging_mode_init(struct rivanna3_charging_mode_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rivanna3_charging_mode_charging_mode_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna3_charging_mode_charging_mode_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna3_charging_mode_charging_mode_enable_is_in_range(uint8_t value);
 
 #ifdef __cplusplus
 }
 #endif
 
 #endif
 
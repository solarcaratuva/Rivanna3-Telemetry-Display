/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.8 Sun Jun 22 17:59:09 2025.
 */

#ifndef BPS_H
#define BPS_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define BPS_MSGID_0_X406_FRAME_ID (0x406u)
#define BPS_MSGID_0_X106_FRAME_ID (0x106u)

/* Frame lengths in bytes. */
#define BPS_MSGID_0_X406_LENGTH (6u)
#define BPS_MSGID_0_X106_LENGTH (3u)

/* Extended or standard frame types. */
#define BPS_MSGID_0_X406_IS_EXTENDED (0)
#define BPS_MSGID_0_X106_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define BPS_MSGID_0_X406_NAME "MSGID_0X406"
#define BPS_MSGID_0_X106_NAME "MSGID_0X106"

/* Signal Names. */
#define BPS_MSGID_0_X406_PACK_VOLTAGE_NAME "pack_voltage"
#define BPS_MSGID_0_X406_PACK_CURRENT_NAME "Pack_Current"
#define BPS_MSGID_0_X406_PACK_SOC_NAME "Pack_SOC"
#define BPS_MSGID_0_X406_DISCHARGE_RELAY_STATUS_NAME "discharge_relay_status"
#define BPS_MSGID_0_X406_CHARGE_RELAY_STATUS_NAME "charge_relay_status"
#define BPS_MSGID_0_X406_CHARGER_SAFETY_NAME "Charger_Safety"
#define BPS_MSGID_0_X406_CHARGE_POWER_SIGNAL_NAME "Charge_Power_Signal"
#define BPS_MSGID_0_X406_BALANCING_ACTIVE_NAME "Balancing_Active"
#define BPS_MSGID_0_X106_DTC_P0_A1_F_INTERNAL_CELL_COMMUNICATION_FAULT_NAME "DTC_P0A1F_Internal_Cell_Communication_Fault"
#define BPS_MSGID_0_X106_WEAK_CELL_FAULT_NAME "Weak_Cell_Fault"
#define BPS_MSGID_0_X106_LOW_CELL_VOLTAGE_FAULT_NAME "Low_Cell_Voltage_Fault"
#define BPS_MSGID_0_X106_CELL_OPEN_WIRING_FAULT_NAME "Cell_Open_Wiring_Fault"
#define BPS_MSGID_0_X106_CURRENT_SENSOR_FAULT_NAME "Current_Sensor_Fault"
#define BPS_MSGID_0_X106_WEAK_PACK_FAULT_NAME "Weak_Pack_Fault"
#define BPS_MSGID_0_X106_THERMISTOR_FAULT_NAME "Thermistor_Fault"
#define BPS_MSGID_0_X106_CAN_COMMUNICATION_FAULT_NAME "CAN_Communication_Fault"
#define BPS_MSGID_0_X106_REDUNDANT_POWER_SUPPLY_FAULT_NAME "Redundant_Power_Supply_Fault"
#define BPS_MSGID_0_X106_HIGH_VOLTAGE_ISOLATION_FAULT_NAME "High_Voltage_Isolation_Fault"
#define BPS_MSGID_0_X106_CHARGE_ENABLE_RELAY_FAULT_NAME "ChargeEnable_Relay_Fault"
#define BPS_MSGID_0_X106_DISCHARGE_ENABLE_RELAY_FAULT_NAME "DischargeEnable_Relay_Fault"
#define BPS_MSGID_0_X106_INTERNAL_HARDWARE_FAULT_NAME "Internal_Hardware_Fault"
#define BPS_MSGID_0_X106_DTC_P0_A0_A_INTERNAL_HEATSINK_THERMISTOR_FAULT_NAME "DTC_P0A0A_Internal_Heatsink_Thermistor_Fault"
#define BPS_MSGID_0_X106_INTERNAL_LOGIC_FAULT_NAME "Internal_Logic_Fault"
#define BPS_MSGID_0_X106_DTC_P0_A0_C_HIGHEST_CELL_VOLTAGE_TOO_HIGH_FAULT_NAME "DTC_P0A0C_Highest_Cell_Voltage_Too_High_Fault"
#define BPS_MSGID_0_X106_DTC_P0_A0_E_LOWEST_CELL_VOLTAGE_TOO_LOW_FAULT_NAME "DTC_P0A0E_Lowest_Cell_Voltage_Too_Low_Fault"
#define BPS_MSGID_0_X106_PACK_TOO_HOT_FAULT_NAME "Pack_Too_Hot_Fault"

/**
 * Signals in message MSGID_0X406.
 *
 * This ID Transmits at 8 ms.
 *
 * All signal values are as on the CAN bus.
 */
struct bps_msgid_0_x406_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pack_voltage;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pack_current;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t pack_soc;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t discharge_relay_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t charge_relay_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t charger_safety;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t charge_power_signal;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing_active;
};

/**
 * Signals in message MSGID_0X106.
 *
 * This ID Transmits at 8 ms.
 *
 * All signal values are as on the CAN bus.
 */
struct bps_msgid_0_x106_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dtc_p0_a1_f_internal_cell_communication_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t weak_cell_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t low_cell_voltage_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cell_open_wiring_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t current_sensor_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t weak_pack_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t thermistor_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_communication_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t redundant_power_supply_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t high_voltage_isolation_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t charge_enable_relay_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t discharge_enable_relay_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t internal_hardware_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dtc_p0_a0_a_internal_heatsink_thermistor_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t internal_logic_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dtc_p0_a0_c_highest_cell_voltage_too_high_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dtc_p0_a0_e_lowest_cell_voltage_too_low_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pack_too_hot_fault;
};

/**
 * Pack message MSGID_0X406.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bps_msgid_0_x406_pack(
    uint8_t *dst_p,
    const struct bps_msgid_0_x406_t *src_p,
    size_t size);

/**
 * Unpack message MSGID_0X406.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bps_msgid_0_x406_unpack(
    struct bps_msgid_0_x406_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MSGID_0X406.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bps_msgid_0_x406_init(struct bps_msgid_0_x406_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bps_msgid_0_x406_pack_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x406_pack_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x406_pack_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bps_msgid_0_x406_pack_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x406_pack_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x406_pack_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x406_pack_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x406_pack_soc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x406_pack_soc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x406_discharge_relay_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x406_discharge_relay_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x406_discharge_relay_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x406_charge_relay_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x406_charge_relay_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x406_charge_relay_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x406_charger_safety_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x406_charger_safety_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x406_charger_safety_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x406_charge_power_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x406_charge_power_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x406_charge_power_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x406_balancing_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x406_balancing_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x406_balancing_active_is_in_range(uint8_t value);

/**
 * Pack message MSGID_0X106.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bps_msgid_0_x106_pack(
    uint8_t *dst_p,
    const struct bps_msgid_0_x106_t *src_p,
    size_t size);

/**
 * Unpack message MSGID_0X106.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bps_msgid_0_x106_unpack(
    struct bps_msgid_0_x106_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MSGID_0X106.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bps_msgid_0_x106_init(struct bps_msgid_0_x106_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x106_dtc_p0_a1_f_internal_cell_communication_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x106_dtc_p0_a1_f_internal_cell_communication_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x106_dtc_p0_a1_f_internal_cell_communication_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x106_weak_cell_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x106_weak_cell_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x106_weak_cell_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x106_low_cell_voltage_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x106_low_cell_voltage_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x106_low_cell_voltage_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x106_cell_open_wiring_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x106_cell_open_wiring_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x106_cell_open_wiring_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x106_current_sensor_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x106_current_sensor_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x106_current_sensor_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x106_weak_pack_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x106_weak_pack_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x106_weak_pack_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x106_thermistor_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x106_thermistor_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x106_thermistor_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x106_can_communication_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x106_can_communication_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x106_can_communication_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x106_redundant_power_supply_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x106_redundant_power_supply_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x106_redundant_power_supply_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x106_high_voltage_isolation_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x106_high_voltage_isolation_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x106_high_voltage_isolation_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x106_charge_enable_relay_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x106_charge_enable_relay_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x106_charge_enable_relay_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x106_discharge_enable_relay_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x106_discharge_enable_relay_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x106_discharge_enable_relay_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x106_internal_hardware_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x106_internal_hardware_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x106_internal_hardware_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x106_dtc_p0_a0_a_internal_heatsink_thermistor_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x106_dtc_p0_a0_a_internal_heatsink_thermistor_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x106_dtc_p0_a0_a_internal_heatsink_thermistor_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x106_internal_logic_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x106_internal_logic_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x106_internal_logic_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x106_dtc_p0_a0_c_highest_cell_voltage_too_high_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x106_dtc_p0_a0_c_highest_cell_voltage_too_high_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x106_dtc_p0_a0_c_highest_cell_voltage_too_high_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x106_dtc_p0_a0_e_lowest_cell_voltage_too_low_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x106_dtc_p0_a0_e_lowest_cell_voltage_too_low_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x106_dtc_p0_a0_e_lowest_cell_voltage_too_low_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_msgid_0_x106_pack_too_hot_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_msgid_0_x106_pack_too_hot_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_msgid_0_x106_pack_too_hot_fault_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif

/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN1VIEWBASE_HPP
#define SCREEN1VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888.hpp>
#include <touchgfx/widgets/canvas/Shape.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/FadeAnimator.hpp>
#include <touchgfx/containers/progress_indicators/BoxProgress.hpp>

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase();
    virtual void setupScreen();
    virtual void handleTickEvent();
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void function1()
    {
        // Override and implement this function in Screen1
    }
    virtual void function2()
    {
        // Override and implement this function in Screen1
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box box1;
    touchgfx::BoxWithBorder boxWithBorder2;
    touchgfx::BoxWithBorder boxWithBorder2_1;
    touchgfx::BoxWithBorder boxWithBorder2_1_1;
    touchgfx::BoxWithBorder boxWithBorder2_1_1_1;
    touchgfx::TextAreaWithOneWildcard total;
    touchgfx::TextAreaWithOneWildcard session;
    touchgfx::TextAreaWithOneWildcard speedMph;
    touchgfx::TextAreaWithOneWildcard speed;
    touchgfx::TextAreaWithOneWildcard cellTemp;
    touchgfx::TextAreaWithOneWildcard cellVolt;
    touchgfx::TextAreaWithOneWildcard leftTurnText;
    touchgfx::TextAreaWithOneWildcard hazardsText;
    touchgfx::TextAreaWithOneWildcard regenENText;
    touchgfx::TextAreaWithOneWildcard lowPowerText;
    touchgfx::TextAreaWithOneWildcard CruiseENText;
    touchgfx::TextAreaWithOneWildcard CruiseDECText;
    touchgfx::TextAreaWithOneWildcard CruiseINCText;
    touchgfx::TextAreaWithOneWildcard rightTurnText;
    touchgfx::TextAreaWithOneWildcard BPS_SOC;
    touchgfx::TextAreaWithOneWildcard DTCStatus;
    touchgfx::TextAreaWithOneWildcard ChargeRelay;
    touchgfx::TextAreaWithOneWildcard DischargeRelayStatus;
    touchgfx::TextAreaWithOneWildcard powerAux;
    touchgfx::TextAreaWithOneWildcard bpsError;
    touchgfx::TextAreaWithOneWildcard solarPhoto;
    touchgfx::TextAreaWithOneWildcard cruiseSpeed;
    touchgfx::TextAreaWithOneWildcard regenBreaking;
    touchgfx::TextAreaWithOneWildcard throttlePedal;
    touchgfx::TextAreaWithOneWildcard solarVolt;
    touchgfx::TextAreaWithOneWildcard solarTemp;
    touchgfx::TextAreaWithOneWildcard solarCurr;
    touchgfx::Line line1;
    touchgfx::PainterRGB888 line1Painter;
    touchgfx::Line line1_1;
    touchgfx::PainterRGB888 line1_1Painter;
    touchgfx::Shape<3> shape1_2;
    touchgfx::PainterRGB888 shape1_2Painter;
    touchgfx::Shape<3> shape1_2_1;
    touchgfx::PainterRGB888 shape1_2_1Painter;
    touchgfx::TextArea MotorCommandsTitle;
    touchgfx::TextArea BPSTitle;
    touchgfx::TextArea DashboardCommands;
    touchgfx::TextArea Error;
    touchgfx::FadeAnimator< touchgfx::TextArea > BPS_Warning;
    touchgfx::FadeAnimator< touchgfx::TextArea > PowerAux_Warning;
    touchgfx::FadeAnimator< touchgfx::TextArea > MtrComm_Warning;
    touchgfx::TextArea RegenEN;
    touchgfx::FadeAnimator< touchgfx::TextArea > CruiseDEC;
    touchgfx::FadeAnimator< touchgfx::TextArea > CruiseINC;
    touchgfx::TextArea CruiseText;
    touchgfx::TextArea LowPowerEN;
    touchgfx::BoxProgress BatteryChargeFill;
    touchgfx::TextArea BatteryChargeText;
    touchgfx::TextArea recentErrorText;
    touchgfx::TextAreaWithOneWildcard errorLine1;
    touchgfx::TextAreaWithOneWildcard errorLine2;
    touchgfx::TextAreaWithOneWildcard errorLine3;
    touchgfx::TextArea textArea3;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TOTAL_SIZE = 10;
    touchgfx::Unicode::UnicodeChar totalBuffer[TOTAL_SIZE];
    static const uint16_t SESSION_SIZE = 10;
    touchgfx::Unicode::UnicodeChar sessionBuffer[SESSION_SIZE];
    static const uint16_t SPEEDMPH_SIZE = 10;
    touchgfx::Unicode::UnicodeChar speedMphBuffer[SPEEDMPH_SIZE];
    static const uint16_t SPEED_SIZE = 10;
    touchgfx::Unicode::UnicodeChar speedBuffer[SPEED_SIZE];
    static const uint16_t CELLTEMP_SIZE = 10;
    touchgfx::Unicode::UnicodeChar cellTempBuffer[CELLTEMP_SIZE];
    static const uint16_t CELLVOLT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar cellVoltBuffer[CELLVOLT_SIZE];
    static const uint16_t LEFTTURNTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar leftTurnTextBuffer[LEFTTURNTEXT_SIZE];
    static const uint16_t HAZARDSTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar hazardsTextBuffer[HAZARDSTEXT_SIZE];
    static const uint16_t REGENENTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar regenENTextBuffer[REGENENTEXT_SIZE];
    static const uint16_t LOWPOWERTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar lowPowerTextBuffer[LOWPOWERTEXT_SIZE];
    static const uint16_t CRUISEENTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar CruiseENTextBuffer[CRUISEENTEXT_SIZE];
    static const uint16_t CRUISEDECTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar CruiseDECTextBuffer[CRUISEDECTEXT_SIZE];
    static const uint16_t CRUISEINCTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar CruiseINCTextBuffer[CRUISEINCTEXT_SIZE];
    static const uint16_t RIGHTTURNTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar rightTurnTextBuffer[RIGHTTURNTEXT_SIZE];
    static const uint16_t BPS_SOC_SIZE = 10;
    touchgfx::Unicode::UnicodeChar BPS_SOCBuffer[BPS_SOC_SIZE];
    static const uint16_t DTCSTATUS_SIZE = 10;
    touchgfx::Unicode::UnicodeChar DTCStatusBuffer[DTCSTATUS_SIZE];
    static const uint16_t CHARGERELAY_SIZE = 10;
    touchgfx::Unicode::UnicodeChar ChargeRelayBuffer[CHARGERELAY_SIZE];
    static const uint16_t DISCHARGERELAYSTATUS_SIZE = 10;
    touchgfx::Unicode::UnicodeChar DischargeRelayStatusBuffer[DISCHARGERELAYSTATUS_SIZE];
    static const uint16_t POWERAUX_SIZE = 10;
    touchgfx::Unicode::UnicodeChar powerAuxBuffer[POWERAUX_SIZE];
    static const uint16_t BPSERROR_SIZE = 10;
    touchgfx::Unicode::UnicodeChar bpsErrorBuffer[BPSERROR_SIZE];
    static const uint16_t SOLARPHOTO_SIZE = 10;
    touchgfx::Unicode::UnicodeChar solarPhotoBuffer[SOLARPHOTO_SIZE];
    static const uint16_t CRUISESPEED_SIZE = 10;
    touchgfx::Unicode::UnicodeChar cruiseSpeedBuffer[CRUISESPEED_SIZE];
    static const uint16_t REGENBREAKING_SIZE = 10;
    touchgfx::Unicode::UnicodeChar regenBreakingBuffer[REGENBREAKING_SIZE];
    static const uint16_t THROTTLEPEDAL_SIZE = 10;
    touchgfx::Unicode::UnicodeChar throttlePedalBuffer[THROTTLEPEDAL_SIZE];
    static const uint16_t SOLARVOLT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar solarVoltBuffer[SOLARVOLT_SIZE];
    static const uint16_t SOLARTEMP_SIZE = 10;
    touchgfx::Unicode::UnicodeChar solarTempBuffer[SOLARTEMP_SIZE];
    static const uint16_t SOLARCURR_SIZE = 10;
    touchgfx::Unicode::UnicodeChar solarCurrBuffer[SOLARCURR_SIZE];
    static const uint16_t ERRORLINE1_SIZE = 20;
    touchgfx::Unicode::UnicodeChar errorLine1Buffer[ERRORLINE1_SIZE];
    static const uint16_t ERRORLINE2_SIZE = 20;
    touchgfx::Unicode::UnicodeChar errorLine2Buffer[ERRORLINE2_SIZE];
    static const uint16_t ERRORLINE3_SIZE = 20;
    touchgfx::Unicode::UnicodeChar errorLine3Buffer[ERRORLINE3_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Tick Counter Declarations
     */
    static const uint32_t TICK_INTERACTION4_INTERVAL = 15;
    uint32_t frameCountInteraction4Interval;

};

#endif // SCREEN1VIEWBASE_HPP
